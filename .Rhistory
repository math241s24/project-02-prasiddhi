tm_text("iso_a3", size = 0.4, just = "center")
})
observe({
var <- input$var
species_name <- input$species
species_label <- switch(species_name,
"Arabica" = "arabica_world",
"Robusta" = "robusta_world",
"Both" = "both_world")
dataset <- get(species_label)
tmapProxy("map", session, {
tm_remove_layer(401) +
tm_shape(dataset) +
tm_polygons(title = paste(var, "(",species_name,")"), var, zindex = 401, palette = coffee_palette, id = input$var) +
tm_text("iso_a3", size = 0.4, just = "center")
})
})
}
app <- shinyApp(ui, server)
if (interactive()) app
}
# Chunk 5
model_ui <- fluidPage(
titlePanel("Guess the Continent based on Coffee Taste!"),
sidebarLayout(
sidebarPanel(
sliderInput("Sweetness", "Sweetness:", min = 0, max = 10, value = 5),
sliderInput("Acidity", "Acidity:", min = 0, max = 10, value = 5),
sliderInput("Total", "Total:", min = 0, max = 10, value = 5),
sliderInput("Flavor", "Flavor:", min = 0, max = 10, value = 5),
sliderInput("Aroma", "Aroma:", min = 0, max = 10, value = 5),
selectInput("Species", "Species:", choices = c("Arabica", "Robusta")),
actionButton("predict_button", "Predict")
),
mainPanel(
textOutput("prediction")
)
)
)
model_server <- function(input, output) {
class_to_continent <- c("1" = "North America",
"2" = "South America",
"3" = "Asia",
"4" = "Africa")
observeEvent(input$predict_button, {
input_data <- data.frame(
Sweetness = input$Sweetness,
Acidity = input$Acidity,
Total = input$Total,
Flavor = input$Flavor,
Aroma = input$Aroma,
Species = input$Species
)
pred_tree <- predict(mod_tree_all, new_data = input_data, type = "class")
pred_tree <- as.character(pred_tree)
pred_tree_continent <- class_to_continent[pred_tree]
print(paste("Decision Tree Prediction:", pred_tree, "=>", pred_tree_continent))
# I wanted to check to see that the number prediction corresponded with the right continent
pred_forest <- predict(mod_forest, new_data = input_data, type = "class")
pred_forest <- as.character(pred_forest)
pred_forest_continent <- class_to_continent[pred_forest]
print(paste("Random Forest Prediction:", pred_forest, "=>", pred_forest_continent))
output$prediction <- renderText({
paste("Decision Tree Prediction:", pred_tree_continent, "\n",
"Random Forest Prediction:", pred_forest_continent)
})
})
}
shinyApp(ui = model_ui, server = model_server)
# Chunk 1: global
library(shiny)
library(tmap)
library(tmaptools)
library(tidyverse)
library(rsconnect)
data("World")
# Chunk 2: mapping data
countries <- World %>%
select(name, iso_a3) %>%
rename("Country of Origin" = name)
arabica <- read_csv("data/arabica_data_cleaned.csv") %>%
rename("Country of Origin" = Country.of.Origin,
"Total Cup Points" = Total.Cup.Points) %>%
select("Country of Origin","Acidity", "Aroma", "Flavor", "Sweetness", "Total Cup Points") %>%
mutate(`Country of Origin` = recode(`Country of Origin`,
"Cote d?Ivoire" = "Cote d'Ivoire",
"Tanzania, United Republic Of" = "Tanzania",
"Laos" = "Lao PDR",
"United States (Puerto Rico)" = "Puerto Rico",
"United States (Hawaii)" = "United States")) %>%
filter(`Country of Origin` != "Mauritius") %>%
filter(!is.na(`Country of Origin`)) %>%
group_by(`Country of Origin`) %>%
summarize(`Acidity` = mean(Acidity),
`Aroma` = mean(Aroma),
`Flavor` = mean(Flavor),
`Sweetness` = mean(Sweetness),
`Total Cup Points` = mean(`Total Cup Points`))
arabica_world <- merge(countries, arabica,
by.x = "Country of Origin", by.y = "Country of Origin",
all.x = TRUE, all.y = TRUE)
robusta <- read_csv("data/robusta_data_cleaned.csv") %>%
rename("Country of Origin" = Country.of.Origin,
"Total Cup Points" = Total.Cup.Points,
"Acidity" = `Salt...Acid`,
"Aroma" = `Fragrance...Aroma`,
"Sweetness" = `Bitter...Sweet`) %>%
select("Country of Origin","Acidity", "Aroma", "Flavor", "Sweetness", "Total Cup Points") %>%
filter(!is.na(`Country of Origin`)) %>%
group_by(`Country of Origin`) %>%
summarize(`Acidity` = mean(Acidity),
`Aroma` = mean(Aroma),
`Flavor` = mean(Flavor),
`Sweetness` = mean(Sweetness),
`Total Cup Points` = mean(`Total Cup Points`))
robusta_world <- merge(countries, robusta,
by.x = "Country of Origin", by.y = "Country of Origin",
all.x = TRUE, all.y = TRUE)
merged <- read_csv("data/merged_data_cleaned.csv") %>%
rename("Country of Origin" = Country.of.Origin,
"Total Cup Points" = Total.Cup.Points) %>%
select("Country of Origin","Acidity", "Aroma", "Flavor", "Sweetness", "Total Cup Points") %>%
mutate(`Country of Origin` = recode(`Country of Origin`,
"Cote d?Ivoire" = "Cote d'Ivoire",
"Tanzania, United Republic Of" = "Tanzania",
"Laos" = "Lao PDR",
"United States (Puerto Rico)" = "Puerto Rico",
"United States (Hawaii)" = "United States")) %>%
filter(`Country of Origin` != "Mauritius") %>%
filter(!is.na(`Country of Origin`)) %>%
group_by(`Country of Origin`) %>%
summarize(`Acidity` = mean(Acidity),
`Aroma` = mean(Aroma),
`Flavor` = mean(Flavor),
`Sweetness` = mean(Sweetness),
`Total Cup Points` = mean(`Total Cup Points`))
both_world <- merge(countries, arabica,
by.x = "Country of Origin", by.y = "Country of Origin",
all.x = TRUE, all.y = TRUE)
# Chunk 3: model data
model_countries <- World %>%
st_drop_geometry() %>%
select(name, continent) %>%
filter(continent %in% c("North America", "South America", "Asia", "Africa")) %>%
rename("Country" = name) %>%
mutate(continent = as.character(continent)) # So I can assign Mauritius a continent
model_merged <- read_csv("data/merged_data_cleaned.csv") %>%
rename("Country" = Country.of.Origin,
"Total" = Total.Cup.Points) %>%
mutate(Country = recode(Country,
"Cote d?Ivoire" = "Cote d'Ivoire",
"Tanzania, United Republic Of" = "Tanzania",
"Laos" = "Lao PDR",
"United States (Puerto Rico)" = "Puerto Rico",
"United States (Hawaii)" = "United States")) %>%
filter(!is.na(Country)) %>%
group_by(Country)
model_both_world <- merge(model_countries, model_merged,
by.x = "Country", by.y = "Country",
all.x = TRUE, all.y = TRUE)
coffee <- model_both_world %>%
filter(complete.cases(Species, Acidity, Aroma, Flavor, Sweetness, Total)) %>%
mutate(continent = ifelse(Country == "Mauritius", "Africa", continent)) %>%
filter(continent %in% c("North America", "South America", "Asia", "Africa")) %>%
mutate(Species = as.factor(Species))
coffee$continent <- factor(coffee$continent) # Changing it back to factor
class(coffee$continent)
coffee_parts <- coffee %>%
initial_split(prop = 0.8)
train <- coffee_parts %>%
training()
test <- coffee_parts %>%
testing()
form_all <- as.formula(
"continent ~ Sweetness + Acidity + Total + Flavor + Aroma + Species"
)
mod_tree_all <- decision_tree(mode = "classification") %>%
set_engine("rpart") %>%
fit(form_all, data = train)
mod_forest <- rand_forest(
mode = "classification",
mtry = 6,
trees = 201) %>%
set_engine("randomForest") %>%
fit(formula = form_all, data = train)
# Chunk 4
if (require("shiny")) {
arabica_vars <- setdiff(names(arabica_world), c("Country of Origin", "geometry", "iso_a3"))
robusta_vars <- setdiff(names(robusta_world), c("Country of Origin", "geometry", "iso_a3"))
both_vars <- setdiff(names(both_world), c("Country of Origin", "geometry", "iso_a3"))
coffee_palette <- c("#FFEBCD", "#D2B48C", "#8B4513")
species_names <- c("Arabica", "Robusta", "Both")
map_ui <- fluidPage(
titlePanel("Coffee by Country"),
tmapOutput("map"),
selectInput("var", "Characteristic", arabica_vars),
selectInput("species", "Species", choices = species_names)  # Updated input label
)
map_server <- function(input, output, session) {
output$map <- renderTmap({
species_label <- switch(input$species,
"Arabica" = "arabica_world",
"Robusta" = "robusta_world",
"Both" = "both_world")
dataset <- get(species_label)
tm_shape(dataset) +
tm_polygons(input$var, zindex = 401, palette = coffee_palette, id = input$var) +
tm_text("iso_a3", size = 0.4, just = "center")
})
observe({
var <- input$var
species_name <- input$species
species_label <- switch(species_name,
"Arabica" = "arabica_world",
"Robusta" = "robusta_world",
"Both" = "both_world")
dataset <- get(species_label)
tmapProxy("map", session, {
tm_remove_layer(401) +
tm_shape(dataset) +
tm_polygons(title = paste(var, "(",species_name,")"), var, zindex = 401, palette = coffee_palette, id = input$var) +
tm_text("iso_a3", size = 0.4, just = "center")
})
})
}
app <- shinyApp(ui, server)
if (interactive()) app
}
source("~/Documents/GitHub/math-241-project2/shinyApps/shinymap.R", echo=TRUE)
runApp('shinyApps/shinymodel.R')
source("~/Documents/GitHub/math-241-project2/shinyApps/shinymap.R", echo=TRUE)
library(tidyverse)
library(data.table)
library(stringr)
pledges <- read_csv("~/Documents/RStudio/Climate Finance Research/CFU_Pledges.csv")
table <- read_csv("~/Documents/RStudio/Climate Finance Research/CFU_Table.csv")
projects <- read_csv("~/Documents/RStudio/Climate Finance Research/CFU_Projects.csv")
energy <- projects %>%
filter(`Sector (OECD)` == "Energy")
projectsss <- projects %>%
mutate(Sector = str_extract(`Sector (OECD)`, "^[^\\s]+"))
projects %>%
count(`Sector (OECD)`)
sectors <- projects %>%
mutate(`Sector (OECD)` = tolower(`Sector (OECD)`)) %>%
group_by(`Sector (OECD)`) %>%
summarise(`Total Projects` = n(), .groups = 'drop')
sectors$`Sector (OECD)` <- str_to_title(sectors$`Sector (OECD)`)
View(sectors)
write.csv(sectors, "sectors.csv", row.names = FALSE)
projects_sids_names <- c("Antigua and Barbuda", "Bahamas", "Barbados", "Belize", "Cabo Verde", "Comoros", "Cook Islands", "Cuba", "Dominica", "Dominican Republic", "Fiji", "Grenada", "Guinea-Bissau", "Guyana", "Haiti", "Jamaica", "Kiribati", "Maldives", "Marshall Islands", "Micronesia", "Mauritius", "Nauru", "Niue", "Palau", "Papua New Guinea", "Samoa", "Sao Tome and Principe", "Singapore", "St. Kitts and Nevis", "St. Lucia", "St. Vincent and the Grenadines", "Seychelles", "Solomon Islands", "Suriname", "Timor Leste", "Tonga", "Trinidad and Tobago", "Tuvalu", "Vanuatu")
projects %>%
count(Country)
sids_sectors <- projects %>%
filter(str_detect(Country, paste0(projects_sids_names, collapse = "|"))) %>%
mutate(`Sector (OECD)` = tolower(`Sector (OECD)`)) %>%
group_by(`Sector (OECD)`) %>%
summarise(`Total Projects` = n(), .groups = 'drop') %>%
mutate(`Sector (OECD)` = str_to_title(`Sector (OECD)`))
write.csv(sids_sectors, "sids_sectors.csv", row.names = FALSE)
sids <- c("Antigua and Barbuda", "The Bahamas", "Barbados", "Belize", "Cabo Verde", "Comoros", "Cook Islands", "Cuba", "Dominica", "Dominican Republic", "Fiji", "Grenada", "Guinea-Bissau", "Guyana", "Haiti", "Jamaica", "Kiribati", "Maldives", "Marshall Islands", "Federated States of Micronesia", "Mauritius", "Nauru", "Niue", "Palau", "Papua New Guinea", "Samoa", "São Tomé and Principe", "Singapore", "Saint Kitts and Nevis", "Saint Lucia", "Saint Vincent and the Grenadines", "Seychelles", "Solomon Islands", "Suriname", "East Timor", "Tonga", "Trinidad and Tobago", "Tuvalu", "Vanuatu")
library(rnaturalearth)
world <- ne_countries(scale = "medium", returnclass = "sf")
countries <- world %>%
select(admin, adm0_a3, sovereignt, continent) %>%
mutate(SIDS = admin %in% sids) %>%
filter(SIDS == TRUE)
library(tidyverse)
library(data.table)
library(stringr)
pledges <- read_csv("~/Documents/RStudio/Climate Finance Research/CFU_Pledges.csv")
table <- read_csv("~/Documents/RStudio/Climate Finance Research/CFU_Table.csv")
projects <- read_csv("~/Documents/RStudio/Climate Finance Research/CFU_Projects.csv")
energy <- projects %>%
filter(`Sector (OECD)` == "Energy")
projectsss <- projects %>%
mutate(Sector = str_extract(`Sector (OECD)`, "^[^\\s]+"))
projects %>%
count(`Sector (OECD)`)
sectors <- projects %>%
mutate(`Sector (OECD)` = tolower(`Sector (OECD)`)) %>%
group_by(`Sector (OECD)`) %>%
summarise(`Total Projects` = n(), .groups = 'drop')
sectors$`Sector (OECD)` <- str_to_title(sectors$`Sector (OECD)`)
View(sectors)
write.csv(sectors, "sectors.csv", row.names = FALSE)
projects_sids_names <- c("Antigua and Barbuda", "Bahamas", "Barbados", "Belize", "Cabo Verde", "Comoros", "Cook Islands", "Cuba", "Dominica", "Dominican Republic", "Fiji", "Grenada", "Guinea-Bissau", "Guyana", "Haiti", "Jamaica", "Kiribati", "Maldives", "Marshall Islands", "Micronesia", "Mauritius", "Nauru", "Niue", "Palau", "Papua New Guinea", "Samoa", "Sao Tome and Principe", "Singapore", "St. Kitts and Nevis", "St. Lucia", "St. Vincent and the Grenadines", "Seychelles", "Solomon Islands", "Suriname", "Timor Leste", "Tonga", "Trinidad and Tobago", "Tuvalu", "Vanuatu")
projects %>%
count(Country)
sids_sectors <- projects %>%
filter(str_detect(Country, paste0(projects_sids_names, collapse = "|"))) %>%
mutate(`Sector (OECD)` = tolower(`Sector (OECD)`)) %>%
group_by(`Sector (OECD)`) %>%
summarise(`Total Projects` = n(), .groups = 'drop') %>%
mutate(`Sector (OECD)` = str_to_title(`Sector (OECD)`))
write.csv(sids_sectors, "sids_sectors.csv", row.names = FALSE)
sids <- c("Antigua and Barbuda", "The Bahamas", "Barbados", "Belize", "Cabo Verde", "Comoros", "Cook Islands", "Cuba", "Dominica", "Dominican Republic", "Fiji", "Grenada", "Guinea-Bissau", "Guyana", "Haiti", "Jamaica", "Kiribati", "Maldives", "Marshall Islands", "Federated States of Micronesia", "Mauritius", "Nauru", "Niue", "Palau", "Papua New Guinea", "Samoa", "São Tomé and Principe", "Singapore", "Saint Kitts and Nevis", "Saint Lucia", "Saint Vincent and the Grenadines", "Seychelles", "Solomon Islands", "Suriname", "East Timor", "Tonga", "Trinidad and Tobago", "Tuvalu", "Vanuatu")
library(rnaturalearth)
world <- ne_countries(scale = "medium", returnclass = "sf")
countries <- world %>%
select(admin, adm0_a3, sovereignt, continent) %>%
mutate(SIDS = admin %in% sids) %>%
filter(SIDS == TRUE)
View(projects)
mod_tree_all
data("World")
countries <- World %>%
st_drop_geometry() %>%
select(name, continent) %>%
filter(continent %in% c("North America", "South America", "Asia", "Africa")) %>%
rename("Country" = name) %>%
mutate(continent = as.character(continent)) %>% # So I can assign Mauritius a continent
mutate(Country = as.character(Country))
library(tmap)
library(sf)
library(tidyverse)
library(rpart)
library(tidymodels)
library(randomForest)
library(caret)
library(tmap)
library(sf)
library(tidyverse)
library(rpart)
library(tidymodels)
library(randomForest)
library(caret)
data("World")
countries <- World %>%
st_drop_geometry() %>%
select(name, continent) %>%
filter(continent %in% c("North America", "South America", "Asia", "Africa")) %>%
rename("Country" = name) %>%
mutate(continent = as.character(continent)) %>% # So I can assign Mauritius a continent
mutate(Country = as.character(Country))
merged <- read_csv("data/merged_data_cleaned.csv") %>%
rename("Country" = Country.of.Origin,
"Total" = Total.Cup.Points) %>%
mutate(Country = recode(Country,
"Cote d?Ivoire" = "Cote d'Ivoire",
"Tanzania, United Republic Of" = "Tanzania",
"Laos" = "Lao PDR",
"United States (Puerto Rico)" = "Puerto Rico",
"United States (Hawaii)" = "United States")) %>%
filter(!is.na(Country)) %>%
group_by(Country) %>%
mutate(Country = as.character(Country))
both_world <- merge(countries, merged,
by.x = "Country", by.y = "Country",
all.x = TRUE, all.y = TRUE)
coffee <- both_world %>%
filter(complete.cases(Species, Acidity, Aroma, Flavor, Sweetness, Total)) %>%
mutate(continent = ifelse(Country == "Mauritius", "Africa", continent)) %>%
filter(continent %in% c("North America", "South America", "Asia", "Africa")) %>%
mutate(Species = as.factor(Species))
coffee$continent <- factor(coffee$continent)
coffee_parts <- coffee %>%
initial_split(prop = 0.8)
train <- coffee_parts %>%
training()
test <- coffee_parts %>%
testing()
mod_tree_all <- decision_tree(mode = "classification") %>%
set_engine("rpart") %>%
fit(form_all, data = train)
form_all <- as.formula(
"continent ~ Sweetness + Acidity + Total + Flavor + Aroma + Species"
)
mod_tree_all
mod_tree_all <- decision_tree(mode = "classification") %>%
set_engine("rpart") %>%
fit(form_all, data = train)
mod_tree_all
accuracy(pred_all, continent, continent_dtree)
accuracy(pred_all, continent, continent_dtree)
pred_all <- train %>%
select(continent) %>%
bind_cols(
predict(mod_tree_all, new_data = train, type = "class")
) %>%
rename(continent_dtree = .pred_class)
accuracy(pred_all, continent, continent_dtree)
conf_matrix
conf_matrix <- pred_all %>%
conf_mat(truth = continent, estimate = continent_dtree)
conf_matrix
data("World")
countries <- World %>%
st_drop_geometry() %>%
select(name, continent) %>%
filter(continent %in% c("North America", "South America", "Asia", "Africa")) %>%
rename("Country" = name) %>%
mutate(continent = as.character(continent)) %>% # So I can assign Mauritius a continent
mutate(Country = as.character(Country))
merged <- read_csv("data/merged_data_cleaned.csv") %>%
rename("Country" = Country.of.Origin,
"Total" = Total.Cup.Points) %>%
mutate(Country = recode(Country,
"Cote d?Ivoire" = "Cote d'Ivoire",
"Tanzania, United Republic Of" = "Tanzania",
"Laos" = "Lao PDR",
"United States (Puerto Rico)" = "Puerto Rico",
"United States (Hawaii)" = "United States")) %>%
filter(!is.na(Country)) %>%
group_by(Country) %>%
mutate(Country = as.character(Country))
both_world <- merge(countries, merged,
by.x = "Country", by.y = "Country",
all.x = TRUE, all.y = TRUE)
coffee <- both_world %>%
filter(complete.cases(Species, Acidity, Aroma, Flavor, Sweetness, Total)) %>%
mutate(continent = ifelse(Country == "Mauritius", "Africa", continent)) %>%
filter(continent %in% c("North America", "South America", "Asia", "Africa")) %>%
mutate(Species = as.factor(Species))
coffee$continent <- factor(coffee$continent)
coffee_parts <- coffee %>%
initial_split(prop = 0.8)
train <- coffee_parts %>%
training()
test <- coffee_parts %>%
testing()
form_all <- as.formula(
"continent ~ Sweetness + Acidity + Total + Flavor + Aroma + Species"
)
mod_tree_all <- decision_tree(mode = "classification") %>%
set_engine("rpart") %>%
fit(form_all, data = train)
pred_all <- train %>%
select(continent) %>%
bind_cols(
predict(mod_tree_all, new_data = train, type = "class")
) %>%
rename(continent_dtree = .pred_class)
mod_forest <- rand_forest(
mode = "classification",
mtry = 6,
trees = 250) %>%
set_engine("randomForest") %>%
fit(formula = form_all, data = train)
pred_forest <- train %>%
select(continent) %>%
bind_cols(
predict(mod_forest, new_data = train, type = "class")
)
mod_forest <- rand_forest(
mode = "classification",
mtry = 6,
trees = 250) %>%
set_engine("randomForest") %>%
fit(formula = form_all, data = train)
pred_forest <- train %>%
select(continent) %>%
bind_cols(
predict(mod_forest, new_data = train, type = "class")
)
accuracy(pred_forest, continent, .pred_class)
pred_forest_test <- test %>%
select(continent) %>%
bind_cols(
predict(mod_forest, new_data = test, type = "class")
)
pred_forest_test
accuracy(pred_forest_test, continent, .pred_class)
pred_forest_test <- test %>%
select(continent) %>%
bind_cols(
predict(mod_forest, new_data = test, type = "class")
)
pred_forest_test
accuracy(pred_forest_test, continent, .pred_class)
accuracy(pred_all, continent, continent_dtree)
conf_matrix <- pred_all %>%
conf_mat(truth = continent, estimate = continent_dtree)
conf_matrix
mod_forest <- rand_forest(
mode = "classification",
mtry = 6,
trees = 250) %>%
set_engine("randomForest") %>%
fit(formula = form_all, data = train)
pred_forest <- train %>%
select(continent) %>%
bind_cols(
predict(mod_forest, new_data = train, type = "class")
)
conf_matrix_forest <- pred_forest %>%
conf_mat(truth = continent, estimate = .pred_class)
conf_matrix_forest
accuracy(pred_forest, continent, .pred_class)
pred_forest_test <- test %>%
select(continent) %>%
bind_cols(
predict(mod_forest, new_data = test, type = "class")
)
conf_matrix_forest_test <- pred_forest %>%
conf_mat(truth = continent, estimate = .pred_class)
conf_matrix_forest_test
accuracy(pred_forest_test, continent, .pred_class)
pred_forest_test <- test %>%
select(continent) %>%
bind_cols(
predict(mod_forest, new_data = test, type = "class")
)
conf_matrix_forest_test <- pred_forest_test %>%
conf_mat(truth = continent, estimate = .pred_class)
conf_matrix_forest_test
accuracy(pred_forest_test, continent, .pred_class)
randomForest::importance(mod_forest$fit) %>%
as_tibble(rownames = "variable") %>%
arrange(desc(MeanDecreaseGini))
source("~/Documents/GitHub/math-241-project2/shinyApps/shinymap.R", echo=TRUE)
runApp('shinyApps/shinymodel.R')
